name: Python Backend CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  python-backend-checks:
    name: Python Backend Checks
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: [3.12]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.7.1
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Install Backend Dependencies
      working-directory: ./backend
      run: poetry install

    - name: Lint Backend with Black
      working-directory: ./backend
      run: poetry run black . --check

    - name: Lint Backend with isort
      working-directory: ./backend
      run: poetry run isort . --check

    - name: Test Backend
      working-directory: ./backend
      run: poetry run pytest
      env:
        MONGODB_URI: mongodb://localhost:27017/test_db
        REDIS_URL: redis://localhost:6379
        PINECONE_API_KEY: dummy_key
        PINECONE_INDEX_NAME: dummy_index
        ANTHROPIC_API_KEY: dummy_key
        ELEVENLABS_API_KEY: dummy_key
        DEEPGRAM_API_KEY: dummy_key

  frontend-checks:
    name: Frontend Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install Frontend Dependencies
      working-directory: ./frontend
      run: npm ci
      
    - name: Lint Frontend
      working-directory: ./frontend
      run: npm run lint
      
    - name: Test Frontend
      working-directory: ./frontend
      run: npm test
